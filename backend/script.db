-- Database: CasaMed

CREATE TABLE users (
    id SERIAL PRIMARY KEY,                          -- ID autoincrementante
    email VARCHAR(255) NOT NULL,
    pass VARCHAR(255) NOT NULL,
    first_name VARCHAR(255),                        -- Nome
    last_name VARCHAR(255),                         -- Cognome
    birth_date DATE,                                -- Data di nascita
    address VARCHAR(255),                           -- Indirizzo
    vat_number VARCHAR(20),                         -- Partita IVA
    professional_insurance_number VARCHAR(20),      -- Numero di assicurazione professionale
    professional_insurance_expiry_date DATE,        -- Data di scadenza dell'assicurazione professionale
    iban VARCHAR(34),                               -- IBAN
    professional_association_registration VARCHAR(50)  -- Numero di registrazione associazione professionale
);

-- Creazione utente con ruolo 0 (pazienti)
CREATE TABLE users_type_0 (
    CONSTRAINT users_type_0_pkey PRIMARY KEY (id),
    CONSTRAINT users_type_0_email_unique UNIQUE (email) -- Vincolo di unicità per email
) INHERITS (users);  -- Eredita da users

-- Creazione utente con ruolo 1 (medici)
CREATE TABLE users_type_1 (
    CONSTRAINT users_type_1_pkey PRIMARY KEY (id),
    other_field_1 VARCHAR(255),                     -- Campo specifico per il ruolo 1
    other_field_2 VARCHAR(255),                     -- Un altro campo specifico per il ruolo 1
    CONSTRAINT users_type_1_email_unique UNIQUE (email) -- Vincolo di unicità per email
) INHERITS (users);  -- Eredita da users

-- Disponibilità dei medici (con orario)
CREATE TABLE availability (
    id SERIAL PRIMARY KEY,                          -- ID univoco per ogni disponibilità
    user_id INT NOT NULL,                           -- Collegamento all'ID dell'utente (medico)
    available_date DATE NOT NULL,                   -- Data di disponibilità
    start_time TIME NOT NULL,                       -- Orario di inizio disponibilità
    end_time TIME NOT NULL                          -- Orario di fine disponibilità
);

ALTER TABLE users_type_1
ADD COLUMN specializations VARCHAR(255)[];

ALTER TABLE users
ADD COLUMN verification_token VARCHAR(255),
ADD COLUMN is_verified BOOLEAN DEFAULT FALSE;


ALTER TABLE users
ADD COLUMN reset_token VARCHAR(255),            -- Token per il reset della password
ADD COLUMN reset_token_expiry TIMESTAMP;       -- Data e ora di scadenza del token


-- Creazione della tabella bookings per le prenotazioni
CREATE TABLE bookings (
    id SERIAL PRIMARY KEY,                     -- ID univoco per ogni prenotazione
    patient_id INT NOT NULL,                   -- ID dell'utente paziente (role 0)
    doctor_id INT NOT NULL,                    -- ID dell'utente medico (role 1)
    booking_date DATE NOT NULL,                -- Data della prenotazione
    start_time TIME NOT NULL,                  -- Orario di inizio prenotazione
    end_time TIME NOT NULL,                    -- Orario di fine prenotazione
    
    CONSTRAINT fk_patient FOREIGN KEY (patient_id) REFERENCES users_type_0 (id) ON DELETE CASCADE,
    CONSTRAINT fk_doctor FOREIGN KEY (doctor_id) REFERENCES users_type_1 (id) ON DELETE CASCADE
);

ALTER TABLE bookings
ADD COLUMN symptom_description TEXT;  -- Descrizione dei sintomi del paziente

ALTER TABLE availability
ADD COLUMN max_patients INT;  -- Numero massimo di pazienti che il medico accetta

ALTER TABLE bookings
ADD COLUMN accepted_booking BOOLEAN DEFAULT false;

ALTER TABLE bookings
ADD COLUMN note TEXT;

ALTER TABLE bookings
ADD COLUMN treatment TEXT;

-- npm install stripe
-- su Flutter: flutter pub get


ALTER TABLE users_type_1
ADD COLUMN is_nurse BOOLEAN DEFAULT false;

ALTER TABLE users
ADD COLUMN role INT NOT NULL;

-- 1. RIMUOVERE I CONSTRAINT ESISTENTI
ALTER TABLE bookings DROP CONSTRAINT IF EXISTS fk_patient;
ALTER TABLE bookings DROP CONSTRAINT IF EXISTS fk_doctor;

-- Constraint per patient_id: deve riferirsi a users con role = 0
ALTER TABLE bookings 
ADD CONSTRAINT fk_patient 
FOREIGN KEY (patient_id) 
REFERENCES users(id)  
ON DELETE CASCADE;

-- Constraint per doctor_id: deve riferirsi a users con role = 1 OR role = 2
ALTER TABLE bookings 
ADD CONSTRAINT fk_doctor 
FOREIGN KEY (doctor_id) 
REFERENCES users(id) 
ON DELETE CASCADE;
